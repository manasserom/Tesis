//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Tesis_Inv2Entities1 : DbContext
    {
        public Tesis_Inv2Entities1()
            : base("name=Tesis_Inv2Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Criptomoneda> Criptomoneda { get; set; }
        public virtual DbSet<Exchange> Exchange { get; set; }
        public virtual DbSet<Instrumento> Instrumento { get; set; }
        public virtual DbSet<Inversion> Inversion { get; set; }
        public virtual DbSet<NuevaTenencia> NuevaTenencia { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoCriptomoneda> TipoCriptomoneda { get; set; }
        public virtual DbSet<TipoDeWallet> TipoDeWallet { get; set; }
        public virtual DbSet<Wallet> Wallet { get; set; }
        public virtual DbSet<Capital_Cripto> Capital_Cripto { get; set; }
        public virtual DbSet<Capital_Cripto_Resumen> Capital_Cripto_Resumen { get; set; }
        public virtual DbSet<Capital_TipoCripto> Capital_TipoCripto { get; set; }
        public virtual DbSet<capital_tipocripto_Resumen> capital_tipocripto_Resumen { get; set; }
        public virtual DbSet<vwCapital_TipoCriptoAgrupadas> vwCapital_TipoCriptoAgrupadas { get; set; }
        public virtual DbSet<vwCapital_TipoCriptoSeparadas> vwCapital_TipoCriptoSeparadas { get; set; }
        public virtual DbSet<vwTenencia> vwTenencia { get; set; }
        public virtual DbSet<Inversion_Cripto_Instru> Inversion_Cripto_Instru { get; set; }
        public virtual DbSet<vwInversion_tenencia> vwInversion_tenencia { get; set; }
        public virtual DbSet<vwInversionesEsteAnio> vwInversionesEsteAnio { get; set; }
        public virtual DbSet<vwCriptomoneda> vwCriptomoneda { get; set; }
        public virtual DbSet<Inversion_Cripto_Instr> Inversion_Cripto_Instr { get; set; }
        public virtual DbSet<vwInversionesTop> vwInversionesTop { get; set; }
        public virtual DbSet<vwInversionEvolucion> vwInversionEvolucion { get; set; }
        public virtual DbSet<vwCriptosDWB> vwCriptosDWB { get; set; }
        public virtual DbSet<InversionTemporal> InversionTemporal { get; set; }
        public virtual DbSet<Capital_Cripto_ResumenWI> Capital_Cripto_ResumenWI { get; set; }
        public virtual DbSet<Capital_CriptoWI> Capital_CriptoWI { get; set; }
        public virtual DbSet<Capital_TipoCriptoWI> Capital_TipoCriptoWI { get; set; }
        public virtual DbSet<capital_tipocripto_ResumenWI> capital_tipocripto_ResumenWI { get; set; }
        public virtual DbSet<Inversion_Cripto_InstruWI> Inversion_Cripto_InstruWI { get; set; }
        public virtual DbSet<vwInversion_tenenciaWI> vwInversion_tenenciaWI { get; set; }
        public virtual DbSet<vwCapital_LugarSeparado> vwCapital_LugarSeparado { get; set; }
        public virtual DbSet<EvolucionInversionesTipoCripto> EvolucionInversionesTipoCripto { get; set; }
        public virtual DbSet<vwInversionesReales_Simuladas> vwInversionesReales_Simuladas { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
