@model WebApplication3.Models.Inversion

@{
    ViewBag.Title = "Finalizar";

    //    TimeSpan Diff_dates = Model.FechaFin.Value.Subtract(Model.FechaInicio);

}

<h2>Finalizar</h2>

<script src="//cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IdInversion)
    @Html.HiddenFor(model => model.Criptomoneda)
    @Html.HiddenFor(model => model.CriptomonedaGanada)
    @Html.HiddenFor(model => model.Lugar)
    @Html.HiddenFor(model => model.Instrumento)
    @Html.HiddenFor(model => model.PrecioInicio)
    @Html.HiddenFor(model => model.PrecioFin)
    @Html.HiddenFor(model => model.CantidadInvertida)
    @Html.HiddenFor(model => model.FechaInicio)

    <div class="container panel">
        <div class="form-group">
            <div class="col-md-4">
                <strong>Lugar:</strong>
                @Html.DropDownList("Lugar", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.Lugar, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <strong>Instrumento:</strong>
                @Html.DropDownList("Instrumento", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.Instrumento, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <strong>Criptomoneda:</strong>
                @Html.DropDownList("Criptomoneda", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.Criptomoneda, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                <strong>Capital Invertido:</strong>
                <input type="text" name="name" class="form-control" disabled value="$ @(Model.CantidadInvertida * Model.Criptomoneda1.Precio)" />
            </div>
            <div class="col-md-4">
                <strong>Cantidad Invertida:</strong>
                @Html.EditorFor(model => model.CantidadInvertida, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.CantidadInvertida, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                <strong>Criptomoneda Ganada:</strong>
                @Html.DropDownList("CriptomonedaGanada", null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.CriptomonedaGanada, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                <strong>Fecha de Inicio:</strong>
                @Html.EditorFor(model => model.FechaInicio, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control",
                        disabled = "disabled",
               @type = "date",
                        @Value = Model.FechaInicio.ToString("yyyy-MM-dd")
                    }
                })
                @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 has-success">
                <strong>Fecha de Finalización:</strong>
                @Html.EditorFor(model => model.FechaFin, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control",
                        @type = "date",
               @onchange = "ActializarDuracion()",
                        @Value = Model.FechaFin.HasValue ? Model.FechaFin.Value.ToString("yyyy-MM-dd") : DateTime.Now.Date.ToString("yyyy-MM-dd")
                    }
                })
                @Html.ValidationMessageFor(model => model.FechaFin, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 has-success">
                <strong>Duración de la Inversión:</strong>
                <input type="text" id="DuracionInversion" name="name" class="form-control" disabled value=" X Dias" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                <strong>Tasa Estimada:</strong>
                @Html.EditorFor(model => model.TasaEstimada, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.TasaEstimada, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 has-success">
                <strong>Cantidad Ganada:</strong>
                @Html.EditorFor(model => model.CantidadGanada, new { htmlAttributes = new { @class = "form-control", @type = "number", @onchange = "ActializarTasaReal()" } })
                @Html.ValidationMessageFor(model => model.CantidadGanada, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4 has-success">
                <strong>Tasa Real:</strong>
                @Html.EditorFor(model => model.TasaReal, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.TasaReal, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-10 col-md-2">
                <br />
                <input type="submit" value="Save" class="btn btn-info form-control" />
            </div>
        </div>
    </div>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    window.onload = ActializarDuracion;
    function difference(date1, date2) {
        const date1utc = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
        const date2utc = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());
        day = 1000 * 60 * 60 * 24;
        return (date2utc - date1utc) / day
    }
    function ActializarDuracion() {
        var InputfechaInicial = document.getElementById("FechaInicio");
        var InputfechaFinal = document.getElementById("FechaFin");

        const date1 = new Date(InputfechaInicial.value);
        const date2 = new Date(InputfechaFinal.value);

        document.getElementById("DuracionInversion").value = difference(date1, date2) + " Dias";
    };
    function ActializarTasaReal() {
        //Dias
        var InputfechaInicial = document.getElementById("FechaInicio");
        var InputfechaFinal = document.getElementById("FechaFin");

        const date1 = new Date(InputfechaInicial.value);
        const date2 = new Date(InputfechaFinal.value);

        var CantidadDias = difference(date1, date2);
        //Ganancia
        var Invertido = document.getElementById("CantidadInvertida").value;
        var Ganado = document.getElementById("CantidadGanada").value;
        var Total = parseInt(Invertido) + parseInt(Ganado);
        var PorGanancia = (Total * 100 / Invertido) - 100;  //Porcentaje de ganancia
        var TasaRealC = (365 * PorGanancia / CantidadDias);
        document.getElementById("TasaReal").value = TasaRealC.toFixed(2) + "%";
    }

</script>
